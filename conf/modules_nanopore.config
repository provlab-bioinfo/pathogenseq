/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/
if(!params.skip_illumina_reads_qc){

    process{

        withName: FASTQC_INPUT {
            ext.args = '--quiet'
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/illumina_reads/input/fastqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: SEQKIT_STATS_INPUT_ILLUMINA {
            ext.prefix = { "${meta.id}.seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/illumina_reads/input/stats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_INPUT {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },    
            ]
        } 
        withName: CSVTK_CONCAT_STATS_QC {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }
    if(params.illumina_reads_qc_tool == 'bbduk'){
        process {
            withName: BBMAP_BBDUK {
                ext.args = [
                    "ref=adapters,artifacts,phix",
                    "ktrim=r",
                    "k=23",
                    "mink=11",
                    "hdist=1",
                    "tpe",
                    "tbo",
                    "maq=15",
                    "trimq=10",
                    "qtrim=r",
                    "minlength=31"
                ].join(' ').trim()
                
                ext.prefix = { "${meta.id}.bbduk_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
                
            }
            withName: FASTQC_QC {
                ext.args = '--quiet'
                ext.prefix = { "${meta.id}.bbduk_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    
            withName: SEQKIT_STATS_QC_ILLUMINA {
                ext.prefix = { "${meta.id}.bbduk_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/stats" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

           
        }
    }

    if(params.illumina_reads_qc_tool == 'fastp'){
        process {
            withName: FASTP {
                ext.args = [
                    "--cut_front",
                    "--cut_front_window_size=1",
                    "--cut_front_mean_quality=10",
                    "--cut_tail",
                    "--cut_tail_window_size=1",
                    "--cut_tail_mean_quality=10",
                    "--n_base_limit 0",
                    "--qualified_quality_phred 20",
                    "--average_qual 20",
                    "--length_required 50",
                    "--detect_adapter_for_pe"
                ].join(' ').trim()
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastp" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: FASTQC_QC {
                ext.args = '--quiet'
                ext.prefix = { "${meta.id}.fastp_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: SEQKIT_STATS_QC_ILLUMINA {
                ext.prefix = { "${meta.id}.fastp_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/stats" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}


if(! params.skip_illumina_kraken2){

    process{

        withName: KRAKEN2_KRAKEN2_ILLUMINA {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/taxonomy/illumina_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*report.txt"
            ]

        }
        withName: KRAKENTOOLS_COMBINEKREPORTS_ILLUMINA {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
            ]

        }
    }
} 

if(!params.skip_nanopore_reads_qc){
    process {
        withName: SEQKIT_STATS_INPUT {
            ext.prefix = { "${meta.id}.seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/input/stats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        
        withName: CSVTK_CONCAT_STATS_INPUT{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
        
        withName: NANOPLOT_INPUT {
            
            ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/input/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: NANOPLOT_QC {
        
            ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: PORECHOP_PORECHOP {   
        
            ext.prefix = { "${meta.id}.porechop" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: SEQKIT_STATS_PORECHOP {
            ext.prefix = { "${meta.id}.porechop_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/qc/stats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_PORECHOP{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
        withName: CHOPPER {   
            ext.args2 = "-q 10 --minlength 1000"
            ext.prefix = { "${meta.id}.chopper" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: SEQKIT_STATS_CHOPPER {
            ext.prefix = { "${meta.id}.chopper_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore_reads/qc/stats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_CHOPPER{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }

    }
}
        

if(!params.skip_nanopore_reads_assembly){
    process{    
        withName: FLYE {
            ext.args = '--iterations 1'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: STATS_FLYE {
            //ext.prefix = { "${meta.id}.flye_contigs.stats" }
            ext.args = "-t"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/flye" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]
        }
        withName: STATS_FLYE_REFORMAT {
            ext.prefix = { "${meta.id}.contig_stats" }
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/flye" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        
        withName: RESTARTGENOME {
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: MEDAKA {
            ext.prefix = { "${meta.id}.contigs" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: STATS_MEDAKA {
            //ext.prefix = { "${meta.id}.contigs.stats" }
            ext.args = "-t"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/medaka" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]
        }
         withName: STATS_MEDAKA_REFORMAT {
            ext.prefix = { "${meta.id}.contig_stats" }
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/medaka" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: CSVTK_CONCAT_STATS_ASM{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
       
    }

    if(!params.skip_illumina_reads_polish  && !params.skip_polypolish){
        process{
            withName: POLYPOLISH {
                ext.prefix = { "${meta.id}.contigs" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
                ]
            }
            withName: STATS_POLYPOLISH {
                //ext.prefix = { "${meta.id}.contigs.stats" }
                ext.args = "-t"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polypolish" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: false
                ]
            }
            withName: STATS_POLYPOLISH_REFORMAT {
                ext.prefix = { "${meta.id}.contig_stats" }
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polypolish" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]

        }
            withName:  MINIMAP2_ALIGN {
                //ext.prefix = { "${meta.id}" }
                ext.args = "-x sr"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
            withName:  MINIMAP2_ALIGN1 {
                ext.prefix = { "${meta.id}_1" }
                ext.args = "-x sr"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
            withName:  MINIMAP2_ALIGN2 {
                ext.args = "-x sr"
                ext.prefix = { "${meta.id}_2" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
            withName: SAMTOOLS_SORT1 {
                ext.prefix = { "${meta.id}.sorted_by_name_1" }
                ext.args = "-n"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
            withName: SAMTOOLS_SORT2 {
                ext.prefix = { "${meta.id}.sorted_by_name_2" }
                ext.args = "-n"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
           
            withName: SAMTOOLS_VIEW1 {
                ext.prefix = { "${meta.id}_1" }
                ext.args = "--output-fmt sam"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }
            withName: SAMTOOLS_VIEW2 {
                ext.prefix = { "${meta.id}_2" }
                ext.args = "--output-fmt sam"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            }

        }
    }
    if(!params.skip_illumina_reads_polish  && !params.skip_polca){ 
        process{
           
            withName: MASURCA_POLCA {
                ext.prefix = { "${meta.id}.contigs" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]
            }
   
            withName: STATS_POLCA {
                //ext.prefix = { "${meta.id}.contigs.stats" }
                ext.args = "-t"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: false
                ]
            }
            withName: STATS_POLCA_REFORMAT {
                ext.prefix = { "${meta.id}.contig_stats" }
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]

            }
        }
    }

    if(! params.skip_depth_and_coverage){

        process{

            withName:  MINIMAP2_ALIGN_DEPTH_ILLUMINA {
                    ext.prefix = { "${meta.id}.illumina" }
                    ext.args = "-x sr"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/illumina" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: true
                    ]
            }
            withName: SAMTOOLS_SORT_DEPTH_ILLUMINA {
                    ext.prefix = { "${meta.id}.illumina_sorted" }
                    //ext.args = "-n"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/illumina" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: true
                    ]
            }
        
        
            withName: SAMTOOLS_INDEX_DEPTH_ILLUMINA {
                ext.prefix = { "${meta.id}.illumina_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/illumina" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
            withName: SAMTOOLS_COVERAGE_DEPTH_ILLUMINA {
                ext.prefix = { "${meta.id}.contig_depth.illumina" }
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
        

            withName: MINIMAP2_ALIGN_DEPTH_NANOPORE {
                    ext.prefix = { "${meta.id}.nanopore" }
                    ext.args = "-x sr"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: true
                    ]
            }
            withName: SAMTOOLS_SORT_DEPTH_NANOPORE {
                //ext.args = "-n"
                ext.prefix = { "${meta.id}.nanopore_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
        
        
            withName: SAMTOOLS_INDEX_DEPTH_NANOPORE {
                ext.prefix = { "${meta.id}.nanopore_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
            withName: SAMTOOLS_COVERAGE_DEPTH_NANOPORE {
                ext.prefix = { "${meta.id}.contig_depth.nanopore" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            withName: MAPPINGREPORT_NANOPORE {
                ext.prefix = { "${meta.id}.depth.nanopore" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            withName: MAPPINGREPORT_ILLUMINA {
                ext.prefix = { "${meta.id}.depth.illumina" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }

             withName: CSVTK_CONCAT_DEPTH_ILLUMINA {
                publishDir = [
                    path: { "${params.outdir}/report" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    
                ]
            }
             withName: CSVTK_CONCAT_DEPTH_NANOPORE {
                publishDir = [
                    path: { "${params.outdir}/report" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    
                ]
            }
        }
        
    }
}
  

    