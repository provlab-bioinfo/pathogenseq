/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

if(!params.skip_nanopore_reads_qc){
    process {
        withName: SEQKIT_STATS_INPUT_NANOPORE {
            ext.prefix = { "${meta.id}.input_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/input" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        
        withName: CSVTK_CONCAT_STATS_INPUT_NANOPORE{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
        
        withName: NANOPLOT_INPUT {
            
            ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/input/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: NANOPLOT_QC {
        
            ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: PORECHOP_PORECHOP {   
        
            ext.prefix = { "${meta.id}.porechop" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/qc/porechop" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: SEQKIT_STATS_PORECHOP {
            ext.prefix = { "${meta.id}.porechop_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/qc/porechop" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_PORECHOP{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
        withName: CHOPPER {   
            ext.args2 = "-q 10 --minlength 1000"
            ext.prefix = { "${meta.id}.chopper" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/qc/chopper" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: SEQKIT_STATS_CHOPPER {
            ext.prefix = { "${meta.id}.chopper_seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/nanopore/qc/chopper" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_CHOPPER{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }

    }
    if(! params.skip_nanopore_dehost){
       
            process {
                withName: HOSTILE_NANOPORE{
                    
                    ext.args = "--force --aligner-args '-ax map-ont'"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/reads/nanopore/dehost" },
                        mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: true
                    ]
                }
                
                withName: SEQKIT_STATS_HOSTILE_NANOPORE {
                    ext.prefix = { "${meta.id}.dehost_seqstats" }
                    ext.args = '-Ta '
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/reads/nanopore/dehost" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                    ]
                }
                
                withName: CSVTK_CONCAT_STATS_HOSTILE_NANOPORE{
                    publishDir = [
                        path: { "${params.outdir}/report" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
                    ]
                }
            }
        }
}
        

if(!params.skip_nanopore_reads_assembly){
    process{    
        withName: FLYE {
            ext.args = '--iterations 1'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/flye" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: STATS_FLYE {
            //ext.prefix = { "${meta.id}.flye_contigs.stats" }
            ext.args = "-t"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/flye" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]
        }
        withName: STATS_FLYE_FORMATASSEMBLYSTATS  {
            ext.prefix = { "${meta.id}.flye_contigs.stats" }
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/flye" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                  
            ]

        }
        
        withName: RESTARTGENOME {
            ext.prefix = { "${meta.id}.contigs_restart" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: MEDAKA {
            ext.prefix = { "${meta.id}.contigs_medaka" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: STATS_MEDAKA {
            //ext.prefix = { "${meta.id}.contigs_medaka.stats" }
            ext.args = "-t"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/medaka" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]
        }
         withName: STATS_MEDAKA_FORMATASSEMBLYSTATS  {
            ext.prefix = { "${meta.id}.contigs_medaka.stats" }
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/medaka" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: CSVTK_CONCAT_STATS_ASM{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
       
    }

    if(!params.skip_illumina_reads_polish  && !params.skip_polypolish){
        process{
            withName: POLYPOLISH {
                ext.args = ""
                ext.args2 = ""
                ext.prefix = { "${meta.id}.contigs_polypolish" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
                ]
            }
            withName: STATS_POLYPOLISH {
                //ext.prefix = { "${meta.id}.contigs.stats" }
                ext.args = "-t"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polypolish" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: false
                ]
            }
            withName: STATS_POLYPOLISH_FORMATASSEMBLYSTATS  {
                ext.prefix = { "${meta.id}.contigs_polypolish.stats" }
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polypolish" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]

        }
        withName: BWAMEM2_INDEX {
           
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*",
                enabled: false
            ]
        } 
          withName: BWAMEM2_MEM_1 {
                ext.prefix = { "${meta.id}_1" }
                ext.args = "-a "
                ext.args2 = "-O SAM"
                ext.suffix = 'sam'
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            } 
            withName: BWAMEM2_MEM_2 {
                ext.prefix = { "${meta.id}_2" }
                ext.args2 = "-O SAM"
                ext.args = "-a "
                ext.suffix = 'sam'
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
                ]
            } 

        }
    }
    if(!params.skip_illumina_reads_polish  && !params.skip_polca){ 
        process{
           
            withName: MASURCA_POLCA {
                ext.prefix = { "${meta.id}.contigs" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]
            }
   
            withName: STATS_POLCA {
                //ext.prefix = { "${meta.id}.contigs.stats" }
                ext.args = "-t"
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: false
                ]
            }
            withName: STATS_POLCA_FORMATASSEMBLYSTATS  {
                ext.prefix = { "${meta.id}.contig_stats" }
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/assembly/nanopore/polca" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*"
                ]

            }
        }
    }

    if(! params.skip_depth_and_coverage){

        process{

            withName: MINIMAP2_ALIGN_DEPTH_NANOPORE {
                    ext.prefix = { "${meta.id}.nanopore" }
                    ext.args = "-x map-ont"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: false
                    ]
            }
            withName: SAMTOOLS_SORT_DEPTH_NANOPORE {
                //ext.args = "-n"
                ext.prefix = { "${meta.id}.nanopore_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
            withName: SAMTOOLS_INDEX_DEPTH_NANOPORE {
                ext.prefix = { "${meta.id}.nanopore_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
            withName: SAMTOOLS_COVERAGE_DEPTH_NANOPORE {
                ext.prefix = { "${meta.id}.contig_depth.nanopore" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            withName: MAPPINGREPORT_NANOPORE {
                ext.prefix = { "${meta.id}.mapping_summary.nanopore" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            
             withName: CSVTK_CONCAT_DEPTH_NANOPORE {
                publishDir = [
                    path: { "${params.outdir}/report" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    
                ]
            }
        }
        
    }
}

if(! params.skip_tbprofiler){
    process{
        withName: TBPROFILER_PROFILE_NANOPORE {
                ext.prefix = { "${meta.id}.tbprofiler" }
                ext.args = [
                    "--platform nanopore",
                    "--caller bcftools",
                    "--depth 0,10",
                    "--af 0,0.1",
                    "--call_whole_genome",
                    "--csv",
                    "--no_trim"
                ].join(' ').trim()

                publishDir = [
                    path: { "${params.outdir}/report/tbprofiler/nanopore" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    
                ]

        }
        withName: TBPROFILER_COLLATE_NANOPORE {
            ext.prefix = { "tbprofiler_nanopore" }
            publishDir = [
                path: { "${params.outdir}/report/tbprofiler/nanopore" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },  
            ]

        }
    }
}
    