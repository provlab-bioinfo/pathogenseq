/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEETCHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            
        ]
    }
    withName: FASTQC_RAW {
        ext.args = '--quiet'
        
        publishDir = [
            path: { "${params.outdir}/shortreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: FASTQC_QC {
        ext.args = '--quiet'
        
        publishDir = [
            path: { "${params.outdir}/shortreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BBMAP_BBDUK {
        ext.args = [
            "ref=adapters,artifacts,phix",
            "ktrim=r",
            "k=23",
            "mink=11",
            "hdist=1",
            "tpe",
            "tbo",
            "maq=15",
            "trimq=10",
            "qtrim=r",
            "minlength=31"
        ].join(' ').trim()
        
        ext.prefix = { "${meta.id}.trim" }
         publishDir = [
            path: { "${params.outdir}/shortreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        
    }
   
    withName: FASTP {
        ext.args = [
            "--cut_front",
            "--cut_front_window_size=1",
            "--cut_front_mean_quality=10",
            "--cut_tail",
            "--cut_tail_window_size=1",
            "--cut_tail_mean_quality=10",
            "--n_base_limit 0",
            "--qualified_quality_phred 20",
            "--average_qual 20",
            "--length_required 50",
            "--detect_adapter_for_pe"
        ].join(' ').trim()
        
        publishDir = [
            path: { "${params.outdir}/shortreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SEQKIT_STATS_SHORT_RAW {
        publishDir = [
            path: { "${params.outdir}/shortreads/rawstats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SEQKIT_STATS_LONG_QC {
        
        publishDir = [
            path: { "${params.outdir}/longreads/qcstats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SEQKIT_STATS_LONG_RAW {
        publishDir = [
            path: { "${params.outdir}/longreads/rawstats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SEQKIT_STATS_SHORT_QC {
        
        publishDir = [
            path: { "${params.outdir}/shortreads/qcstats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    
    withName: CONCAT_STATS_SHORT_RAW{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_STATS_SHORT_QC{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }

   
    withName: CONCAT_STATS_LONG_RAW{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_STATS_LONG_QC{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_STATS_ASM{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_STATS_BAKTA{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_MOBSUITE{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
    withName: CONCAT_AMR{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }
     withName: CONCAT_MLST{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]
    }


    withName: NANOPLOT_RAW {
        
        ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
        publishDir = [
            path: { "${params.outdir}/longreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_raw" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: NANOPLOT_QC {
       
        ext.args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
        publishDir = [
            path: { "${params.outdir}/longreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PORECHOP_PORECHOP {
       
        
        publishDir = [
            path: { "${params.outdir}/longreads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
   
    withName: SKESA {
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
    withName: SPADES {
        ext.args = "--careful --only-assembler --cov-cutoff auto"
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
    withName: UNICYCLER {
        ext.args = "--mode normal --min_fasta_length 200"
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
    withName: SHOVILL {
        
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: SHOVILL_SKESA {
        ext.args = "--assembler skesa"
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_skesa" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }

    withName: SHOVILL_MEGAHIT {
        ext.args = '--assembler megahit'
        publishDir = [
            path: { "${params.outdir}/assembly/short/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}_megahit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: FLYE {
        ext.args = '--iterations 4'
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: STATS_FLYE {
        ext.prefix = { "${meta.id}.flye.genome" }
        publishDir = [
            path: { "${params.outdir}/assembly/long/flye" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
        ]
    }
    withName: MEDAKA {
        ext.prefix = { "${meta.id}.medaka_polished.genome" }
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: STATS_MEDAKA {
        ext.prefix = { "${meta.id}.medaka_polished.genome" }
        publishDir = [
            path: { "${params.outdir}/assembly/long/medaka" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
        ]
    }
     withName: POLYPOLISH {
        
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: POLYPOLISH_STATS {
        ext.prefix = { "${meta.id}.polypolish_polished.genome" }
        publishDir = [
            path: { "${params.outdir}/assembly/long/polypolish" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
        ]
    }
    withName: MASURCA_POLCA {
        publishDir = [
            path: { "${params.outdir}/assembly/long/polca" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
        ]
    }
   
    withName: POLCA_STATS {
        publishDir = [
            path: { "${params.outdir}/assembly/long/polca" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
        ]
    }
   
    withName:  MINIMAP2_ALIGN_1 {
        ext.prefix = { "${meta.id}_1" }
        ext.args = "-x sr"
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }
    withName:  MINIMAP2_ALIGN_2 {
        ext.args = "-x sr"
        ext.prefix = { "${meta.id}_2" }
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }

    withName: SAMTOOLS_VIEW_1 {
        ext.prefix = { "${meta.id}_1" }
        ext.args = "--output-fmt sam"
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }
    withName: SAMTOOLS_VIEW_2 {
        ext.prefix = { "${meta.id}_2" }
        ext.args = "--output-fmt sam"
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }

    withName: BAKTA_BAKTA {
        ext.args = "--min-contig-length 200"
        publishDir = [
            path: { "${params.outdir}/annotation/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
     withName: BAKTA_FEATURES {
        publishDir = [
            path: { "${params.outdir}/annotation/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]

    }
    withName: AMRFINDERPLUS_UPDATE {
        publishDir = [
            path: { "${params.outdir}/resistome/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]

    }
    withName: AMRFINDERPLUS_RUN {
        ext.prefix = { "${meta.id}.amrfinderplus.report" }
        ext.args = " --plus --ident_min 0.9 --coverage_min 0.5 "
        publishDir = [
            path: { "${params.outdir}/resistome/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
          
        ]

    }
    withName: MLST {
        ext.prefix = { "${meta.id}.mlst" }
        publishDir = [
            path: { "${params.outdir}/mlst/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
        ]

    }
    withName: MOBSUITE_RECON {
        ext.prefix = { "${meta.id}.plasmid" }
        publishDir = [
            path: { "${params.outdir}/plasmid/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}_${filename}" },
            //pattern: 'results/*.txt,results/*.fasta'
        ]

    }
    
    withName: ABRICATE_RUN {
        ext.args = "--db vfdb --minid 80 --mincov 80 "
        publishDir = [
            path: { "${params.outdir}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]

    }
    withName: ABRICATE_SUMMARY {
        ext.prefix = { "${meta.id}.abricate" }
        publishDir = [
            path: { "${params.outdir}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
    withName: KRAKEN2_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/taxonomy/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
    withName: BRACKEN_BRACKEN {
        ext.args = " -r 100 -l S "
        ext.prefix = { "${meta.id}.bracken.report" }
        publishDir = [
            path: { "${params.outdir}/taxonomy/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]

    }
   
    withName: SPADES {
        ext.args = '--careful --only-assembler --cov-cutoff auto'
    }
    withName: GUNZIP {
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }
    withName: TABIX_BGZIP {
        publishDir = [
            path: { "${params.outdir}/assembly/long/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: false
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
