/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEETCHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            
        ]
    }
    
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}   
if(!params.skip_bakta){

    process {   

        withName: BAKTA_BAKTA {
            ext.prefix = { "${meta.id}.bakta" }
            ext.args = "--min-contig-length 200"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/annotation/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]   
        }
        withName: GFF2FEATURES_BAKTA {
            ext.prefix = { "${meta.id}.bakta" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/annotation/bakta" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]

        }
        withName: CSVTK_CONCAT_STATS_BAKTA{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }
}
if(!params.skip_mobsuite) {
    process{

        withName: MOBSUITE_RECON {
            //ext.prefix = { "${meta.id}.mobsuite" }
            ext.prefix = ""
            publishDir = [
                path: { "${params.outdir}/${meta.id}/plasmid/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}_${filename}" },
                pattern: '*.{mobtyper_results.txt,plasmid_*.fasta}'
            ]

        }
        withName: CSVTK_CONCAT_MOBSUITE{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }
}

if(! params.skip_amr){
    process{

        withName: AMRFINDERPLUS_UPDATE {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/amr/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]

        }
        withName: AMRFINDERPLUS_RUN {
            ext.prefix = { "${meta.id}.amrfinderplus" }
            ext.args = {" --plus --ident_min 0.9 --coverage_min 0.5 --name ${meta.id}"}
            publishDir = [
                path: { "${params.outdir}/${meta.id}/amr/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
            ]

        }
        withName: CSVTK_CONCAT_AMR{
            
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }
}

if(! params.skip_mlst){
    process{
    
        withName: MLST {
            ext.prefix = { "${meta.id}.mlst" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/mlst/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]

        }
        withName: CSVTK_CONCAT_MLST{
            ext.args = "-H"
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }
}

if(! params.skip_virulome){
    process{
        withName: ABRICATE_RUN_VF {
            ext.prefix = { "${meta.id}.abricate" }
            ext.args = "--db vfdb --minid 80 --mincov 80 "
            publishDir = [
                path: { "${params.outdir}/${meta.id}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*",
                //enabled: false
            ]

        }
        withName: ABRICATE_SUMMARY_VF {
            ext.prefix = { "${meta.id}.abricate" }
            publishDir = [
                path: { "${params.outdir}/report" },
                //path: { "${params.outdir}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
            ]

        }
    }
}
if(! params.skip_checkm2){

    process{
         withName: CHECKM2_PREDICT{
            ext.args = " --force --allmodels"
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },       
            ]
        }
    }
}

if(! params.skip_gambit){

    process{

        withName: GAMBIT_QUERY {
            ext.prefix = { "${meta.id}.gambit_query" }
            ext.args = " -f csv "
            publishDir = [
                path: { "${params.outdir}/${meta.id}/taxonomy/assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },       
            ]
        }
        withName: GAMBIT_QUERY_COLLECT {
            ext.prefix = { "${meta.id}.gambit_query" }
            ext.args = " -f csv "
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },       
            ]
        }
        withName: GAMBIT_TREE {
            ext.prefix = { "${meta.id}.gambit_tree" }
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },       
            ]
        }
    }
}

    
if (params.platform == 'nanopore') {
    includeConfig 'modules_nanopore.config'
}else if (params.platform == 'illumina') {
    includeConfig 'modules_illumina.config'
}