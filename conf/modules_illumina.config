/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/


if(!params.skip_illumina_reads_qc){

    process{

        withName: FASTQC_INPUT {
            ext.args = '--quiet'
            
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/illumina_reads/raw/fastqc" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]
        }
        withName: SEQKIT_STATS_INPUT_ILLUMINA {
            ext.prefix = { "${meta.id}.seqstats" }
            ext.args = '-Ta '
            publishDir = [
                path: { "${params.outdir}/${meta.id}/reads/illumina_reads/raw/stats" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
        withName: CSVTK_CONCAT_STATS_INPUT {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },    
            ]
        } 
        withName: CSVTK_CONCAT_STATS_QC {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }
    }

    if(params.illumina_reads_qc_tool == 'bbduk'){
        process {
            withName: BBMAP_BBDUK {
                ext.args = [
                    "ref=adapters,artifacts,phix",
                    "ktrim=r",
                    "k=23",
                    "mink=11",
                    "hdist=1",
                    "tpe",
                    "tbo",
                    "maq=15",
                    "trimq=10",
                    "qtrim=r",
                    "minlength=31"
                ].join(' ').trim()
                
                ext.prefix = { "${meta.id}.bbduk_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
                
            }
            withName: FASTQC_QC {
                ext.args = '--quiet'
                ext.prefix = { "${meta.id}.bbduk_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

    
            withName: SEQKIT_STATS_QC_ILLUMINA{
                ext.prefix = { "${meta.id}.bbduk_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/stats" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }

           
        }
    }

    if(params.illumina_reads_qc_tool == 'fastp'){
        process {
            withName: FASTP {
                ext.args = [
                    "--cut_front",
                    "--cut_front_window_size=1",
                    "--cut_front_mean_quality=10",
                    "--cut_tail",
                    "--cut_tail_window_size=1",
                    "--cut_tail_mean_quality=10",
                    "--n_base_limit 0",
                    "--qualified_quality_phred 20",
                    "--average_qual 20",
                    "--length_required 50",
                    "--detect_adapter_for_pe"
                ].join(' ').trim()
                
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastp" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: FASTQC_QC {
                ext.args = '--quiet'
                ext.prefix = { "${meta.id}.fastp_trim" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
            withName: SEQKIT_STATS_QC_ILLUMINA {
                ext.prefix = { "${meta.id}.fastp_seqstats" }
                ext.args = '-Ta '
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/reads/illumina_reads/qc/stats" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            }
        }
    }
}

if(! params.skip_illumina_kraken2){

    process{

        withName: KRAKEN2_KRAKEN2_ILLUMINA {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/taxonomy/illumina_reads/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*report.txt"
            ]

        }
        withName: KRAKENTOOLS_COMBINEKREPORTS_ILLUMINA {
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            
            ]

        }
    }
}
 

if(!params.skip_illumina_reads_assembly){
    process {
        withName: SKESA {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/skesa" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]

        }
        withName: STATS_SKESA {
            //ext.prefix = { "${meta.id}.contigs_stats" }
            ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/skesa" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]

        }
         withName: STATS_SKESA_REFORMAT {
            ext.prefix = { "${meta.id}.contigs_stats" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/skesa" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: SPADES {
            ext.args = "--careful --only-assembler --cov-cutoff auto"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/spades" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]

        }
        withName: STATS_SPADES {
            //ext.prefix = { "${meta.id}.contigs_stats" }
            ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/spades" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]

        }
        withName: STATS_SPADES_REFORMAT {
            ext.prefix = { "${meta.id}.contigs_stats" }
            //ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/spades" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: UNICYCLER {
            ext.args = "--no_correct --mode conservative --keep 0 --min_fasta_length 200 "
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/unicycler" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]

        }
        withName: STATS_UNICYCLER {
            //ext.prefix = { "${meta.id}.contig_stats" }
            ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/unicycler" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]


        }
        withName: STATS_UNICYCLER_REFORMAT {
            ext.prefix = { "${meta.id}.contigs_stats" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/unicycler" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: MEGAHIT {
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/megahit" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]

        }
        withName: STATS_MEGAHIT {
            //ext.prefix = { "${meta.id}.contigs_stats" }
            ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/megahit" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]

        }
        withName: STATS_MEGAHIT_REFORMAT {
            ext.prefix = { "${meta.id}.contigs_stats" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/megahit" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        withName: SHOVILL {
            
            // ext.args = '--assembler megahit --gsize 2800000'
            ext.args = '--assembler spades'

            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/shovill" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*"
            ]

        }
        withName: STATS_SHOVILL {
            //ext.prefix = { "${meta.id}.contigs_stats" }
            ext.args = '-t'
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/shovill" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: false
            ]
           

        }
        withName: STATS_SHOVILL_REFORMAT {
            ext.prefix = { "${meta.id}.contigs_stats" }
            publishDir = [
                path: { "${params.outdir}/${meta.id}/assembly/illumina/shovill" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*"
            ]

        }
        
        
        withName: CSVTK_CONCAT_STATS_ASM{
            publishDir = [
                path: { "${params.outdir}/report" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                
            ]
        }

    }

    if(! params.skip_depth_and_coverage){

        process{

            withName:  MINIMAP2_ALIGN_DEPTH_ILLUMINA {
                    ext.prefix = { "${meta.id}.illumina" }
                    ext.args = "-x sr"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/illumina" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: true
                    ]
            }
            withName: SAMTOOLS_SORT_DEPTH_ILLUMINA {
                    ext.prefix = { "${meta.id}.illumina_sorted" }
                    //ext.args = "-n"
                    publishDir = [
                        path: { "${params.outdir}/${meta.id}/depth/illumina" },
                        mode: params.publish_dir_mode,
                        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                        pattern: "*",
                        enabled: true
                    ]
            }
        
        
            withName: SAMTOOLS_INDEX_DEPTH_ILLUMINA {
                ext.prefix = { "${meta.id}.illumina_sorted" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth/illumina" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    enabled: true
                ]
            }
            withName: SAMTOOLS_COVERAGE_DEPTH_ILLUMINA {
                ext.prefix = { "${meta.id}.contig_depth.illumina" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            withName: MAPPINGREPORT_ILLUMINA {
                ext.prefix = { "${meta.id}.depth.illumina" }
                publishDir = [
                    path: { "${params.outdir}/${meta.id}/depth" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*",
                    
                ]
            }
            withName: CSVTK_CONCAT_DEPTH_ILLUMINA {
                publishDir = [
                    path: { "${params.outdir}/report" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    
                ]
            }
             
        }
        
    }
    
}
